{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = token => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://127.0.0.1:3000/rest-auth/login/', {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.key;\n      localStorage.setItem('token', token);\n      dispatch(authSuccess(token));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authSignup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://127.0.0.1:8000/rest-auth/signup/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      const token = res.data.key;\n      localStorage.setItem('token', token);\n      dispatch(authSuccess(token));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      dispatch(authSuccess(token));\n    }\n  };\n};","map":{"version":3,"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","authLogin","username","password","dispatch","post","then","res","data","key","setItem","catch","err","authSignup","email","password1","password2","authCheckState","getItem","undefined"],"sources":["/Users/aditya_nemiwal/Documents/Study/CS251/RevNRat_1/frontend/src/store/actions/auth.js"],"sourcesContent":["import axios from 'axios';\nimport * as actionTypes from './actionTypes';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    }\n}\n\nexport const authSuccess = token => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        token: token\n    }\n}\n\nexport const authFail = error => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    }\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n}\n\nexport const authLogin = (username, password) => {\n    return dispatch => {\n        dispatch(authStart());\n        axios.post('http://127.0.0.1:3000/rest-auth/login/', {\n            username: username,\n            password: password\n        })\n        .then(res => {\n            const token = res.data.key;\n            localStorage.setItem('token', token);\n            dispatch(authSuccess(token));\n        })\n        .catch(err => {\n            dispatch(authFail(err))\n        })\n    }\n}\n\nexport const authSignup = (username, email, password1, password2) => {\n    return dispatch => {\n        dispatch(authStart());\n        axios.post('http://127.0.0.1:8000/rest-auth/signup/', {\n            username: username,\n            email: email,\n            password1: password1,\n            password2: password2\n        })\n        .then(res => {\n            const token = res.data.key;\n            localStorage.setItem('token', token);\n            dispatch(authSuccess(token));\n        })\n        .catch(err => {\n            dispatch(authFail(err))\n        })\n    }\n}\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (token === undefined) {\n            dispatch(logout());\n        } else {\n            dispatch(authSuccess(token));\n        }\n    }\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,WAAW,MAAM,eAAe;AAE5C,OAAO,MAAMC,SAAS,GAAG,MAAM;EAC3B,OAAO;IACHC,IAAI,EAAEF,WAAW,CAACG;EACtB,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGC,KAAK,IAAI;EAChC,OAAO;IACHH,IAAI,EAAEF,WAAW,CAACM,YAAY;IAC9BD,KAAK,EAAEA;EACX,CAAC;AACL,CAAC;AAED,OAAO,MAAME,QAAQ,GAAGC,KAAK,IAAI;EAC7B,OAAO;IACHN,IAAI,EAAEF,WAAW,CAACS,SAAS;IAC3BD,KAAK,EAAEA;EACX,CAAC;AACL,CAAC;AAED,OAAO,MAAME,MAAM,GAAG,MAAM;EACxBC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;EAChC,OAAO;IACHV,IAAI,EAAEF,WAAW,CAACa;EACtB,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EAC7C,OAAOC,QAAQ,IAAI;IACfA,QAAQ,CAAChB,SAAS,EAAE,CAAC;IACrBF,KAAK,CAACmB,IAAI,CAAC,wCAAwC,EAAE;MACjDH,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEA;IACd,CAAC,CAAC,CACDG,IAAI,CAACC,GAAG,IAAI;MACT,MAAMf,KAAK,GAAGe,GAAG,CAACC,IAAI,CAACC,GAAG;MAC1BX,YAAY,CAACY,OAAO,CAAC,OAAO,EAAElB,KAAK,CAAC;MACpCY,QAAQ,CAACb,WAAW,CAACC,KAAK,CAAC,CAAC;IAChC,CAAC,CAAC,CACDmB,KAAK,CAACC,GAAG,IAAI;MACVR,QAAQ,CAACV,QAAQ,CAACkB,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAC;EACN,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,CAACX,QAAQ,EAAEY,KAAK,EAAEC,SAAS,EAAEC,SAAS,KAAK;EACjE,OAAOZ,QAAQ,IAAI;IACfA,QAAQ,CAAChB,SAAS,EAAE,CAAC;IACrBF,KAAK,CAACmB,IAAI,CAAC,yCAAyC,EAAE;MAClDH,QAAQ,EAAEA,QAAQ;MAClBY,KAAK,EAAEA,KAAK;MACZC,SAAS,EAAEA,SAAS;MACpBC,SAAS,EAAEA;IACf,CAAC,CAAC,CACDV,IAAI,CAACC,GAAG,IAAI;MACT,MAAMf,KAAK,GAAGe,GAAG,CAACC,IAAI,CAACC,GAAG;MAC1BX,YAAY,CAACY,OAAO,CAAC,OAAO,EAAElB,KAAK,CAAC;MACpCY,QAAQ,CAACb,WAAW,CAACC,KAAK,CAAC,CAAC;IAChC,CAAC,CAAC,CACDmB,KAAK,CAACC,GAAG,IAAI;MACVR,QAAQ,CAACV,QAAQ,CAACkB,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAC;EACN,CAAC;AACL,CAAC;AAED,OAAO,MAAMK,cAAc,GAAG,MAAM;EAChC,OAAOb,QAAQ,IAAI;IACf,MAAMZ,KAAK,GAAGM,YAAY,CAACoB,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI1B,KAAK,KAAK2B,SAAS,EAAE;MACrBf,QAAQ,CAACP,MAAM,EAAE,CAAC;IACtB,CAAC,MAAM;MACHO,QAAQ,CAACb,WAAW,CAACC,KAAK,CAAC,CAAC;IAChC;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}